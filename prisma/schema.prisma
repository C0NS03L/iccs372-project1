generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Experiments {
  id                       BigInt                     @id @default(autoincrement())
  title                    String
  description              String
  status                   ExperimentStatus           @default(PLANNED)
  startDate                DateTime
  endDate                  DateTime
  completed                Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  ExperimentEquipmentUsage ExperimentEquipmentUsage[]

  tasks                    Json
  Task                     Task[]
}

model ExperimentEquipmentUsage {
  id           BigInt      @id @default(autoincrement())
  experimentId BigInt
  equipmentId  BigInt
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  equipment    Inventory   @relation(fields: [equipmentId], references: [id])
  experiment   Experiments @relation(fields: [experimentId], references: [id])
}

model Inventory {
  id                       BigInt                     @id @default(autoincrement())
  name                     String
  description              String
  available                Boolean                    @default(true)
  stockLevel               Int                        @default(0)
  lowStockThreshold        Int                        @default(5)
  nextMaintenanceDate      DateTime?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  ExperimentEquipmentUsage ExperimentEquipmentUsage[]
}

model MaintenanceTask {
  id            BigInt    @id @default(autoincrement())
  title         String
  description   String
  equipmentId   BigInt
  frequencyDays Int // Frequency in days for repeating this task
  lastPerformed DateTime? // Last time this task was performed
  nextDueDate   DateTime? // Next scheduled due date
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Inventory     Inventory @relation(fields: [equipmentId], references: [id])
}

model Task {
  id            BigInt       @id @default(autoincrement())
  title         String
  description   String
  completed     Boolean      @default(false)
  dueDate       DateTime
  equipmentId   BigInt? // Optional: Links to Inventory for maintenance-related tasks
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Inventory     Inventory?   @relation(fields: [equipmentId], references: [id])
  Experiments   Experiments? @relation(fields: [experimentsId], references: [id])
  experimentsId BigInt?
}

enum ExperimentStatus {
  PLANNED
  ONGOING
  COMPLETED
  CANCELLED
}
